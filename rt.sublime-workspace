{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"new_",
				"new_dir"
			],
			[
				"inter",
				"inter_type"
			],
			[
				"RENDE",
				"RENDERMODE_SOLIDTEXTURE"
			],
			[
				"rt_cl_apply",
				"rt_cl_apply_linear_matrix"
			],
			[
				"CAMERA_M",
				"CAMERA_MODEL_TMP"
			],
			[
				"rt_",
				"rt_cl_render"
			],
			[
				"get",
				"rt_cl_get_reflect"
			],
			[
				"dot",
				"dot_i_n"
			],
			[
				"new_t",
				"new_tbbox"
			],
			[
				"ren",
				"render_mode"
			],
			[
				"resu",
				"result_ray_os"
			],
			[
				"INTER",
				"INTER_INSIDE"
			],
			[
				"get_global",
				"get_global_id"
			],
			[
				"res",
				"res_pixel_color"
			],
			[
				"F64",
				"F64_EXP_BIAS"
			],
			[
				"ma",
				"mc_raysamp_size"
			],
			[
				"vec",
				"vector_normalize"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/rt_scene.h",
			"settings":
			{
				"buffer_size": 10235,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ocl/rt_cl_scene.cl.h",
			"settings":
			{
				"buffer_size": 7788,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/rt_get_str_scene.c",
			"settings":
			{
				"buffer_size": 1421,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ocl/rt_cl_primitives_2d.cl",
			"settings":
			{
				"buffer_size": 3120,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ocl/rt_cl_cone.cl",
			"settings":
			{
				"buffer_size": 3415,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ocl/rt_cl_materials.cl",
			"settings":
			{
				"buffer_size": 4122,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/opencl_render_mem.c",
			"settings":
			{
				"buffer_size": 3541,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ocl/rt_cl_random.cl",
			"settings":
			{
				"buffer_size": 7821,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   rt_cl_render.cl                                    :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: duquesne <marvin@42.com>                   +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2006/06/06 06:06:06 by duquesne          #+#    #+#             */\n/*   Updated: 2006/06/06 06:06:06 by duquesne         ###   ########.fr       */\n/*                                                                            */\n/* ************************************************************************** */\n\nstatic t_intersection\t\trt_cl_primitive_get_inter\n(\n\t\t\t\t\t\t\t\t\tfloat *\t\t\tnew_t,\n\t\t\t\t\t\t\t\t\tt_ray\t\t\tray_os,\n\t\t\t\t\t\t\t\t\tt_primitive\t\ttype\n)\n{\n\tt_intersection\tinter;\n\n\tif (type == sphere)\n\t\tinter = rt_cl_sphere_intersect(new_t, ray_os);\n\telse if (type == plane)\n\t\tinter = rt_cl_plane_intersect(new_t, ray_os);\n\telse if (type == disk)\n\t\tinter = rt_cl_disk_intersect(new_t, ray_os);\n\telse if (type == rectangle)\n\t\tinter = rt_cl_rectangle_intersect(new_t, ray_os);\n\telse if (type == triangle)\n\t\tinter = rt_cl_triangle_intersect(new_t, ray_os);\n\telse if (type == cylinder)\n\t\tinter = rt_cl_cylinder_intersect(new_t, ray_os);\n\telse if (type == cone)\n\t\tinter = rt_cl_cone_intersect(new_t, ray_os);\n\telse if (type == infcylinder)\n\t\tinter = rt_cl_infcylinder_intersect(new_t, ray_os);\n\telse if (type == infcone)\n\t\tinter = rt_cl_infcone_intersect(new_t, ray_os);\n\telse if (type == cube)\n\t\tinter = rt_cl_cube_intersect(new_t, ray_os);\n\telse if (type == paraboloid)\n\t\tinter = rt_cl_paraboloid_intersect(new_t, ray_os);\n\telse if (type == hyperboloid)\n\t\tinter = rt_cl_hyperboloid_intersect(new_t, ray_os);\n\telse if (type == saddle)\n\t\tinter = rt_cl_saddle_intersect(new_t, ray_os);\n\telse\n\t\tinter = INTER_NONE;\n\treturn (inter);\n}\n\nstatic float3\t\trt_cl_primitive_get_normal\n(\n\t\t\t\t\t\t\t\t\tfloat3\t\t\thitpos,\n\t\t\t\t\t\t\t\t\tt_primitive\t\ttype\n)\n{\n\tfloat3\t\tnormal_os;\n\n\tif (type == sphere)\n\t\tnormal_os = rt_cl_sphere_get_normal(hitpos);\n\telse if (type == plane || type == disk || type == rectangle || type == triangle)\n\t\tnormal_os = rt_cl_plane_get_normal(hitpos);\n\telse if (type == cylinder)\n\t\tnormal_os = rt_cl_cylinder_get_normal(hitpos);\n\telse if (type == infcylinder)\n\t\tnormal_os = rt_cl_infcylinder_get_normal(hitpos);\n\telse if (type == infcone)\n\t\tnormal_os = rt_cl_infcone_get_normal(hitpos);\n\telse if (type == cone)\n\t\tnormal_os = rt_cl_cone_get_normal(hitpos);\n\telse if (type == cube)\n\t\tnormal_os = rt_cl_cube_get_normal(hitpos);\n\telse if (type == paraboloid)\n\t\tnormal_os = rt_cl_paraboloid_get_normal(hitpos);\n\telse if (type == hyperboloid)\n\t\tnormal_os = rt_cl_hyperboloid_get_normal(hitpos);\n\telse if (type == saddle)\n\t\tnormal_os = rt_cl_saddle_get_normal(hitpos);\n\telse\n\t\tnormal_os = rt_cl_sphere_get_normal(hitpos);\n\treturn (normal_os);\n}\n\n/*\n** If BBoxes have a non-empty intersection, you can't use new_t as tmax\n** for ray_intersect_bbox.\n*/\nstatic t_intersection\t\trt_cl_trace_ray_to_scene\n(\n\t\t\t\t\t__constant\t\tt_scene\t*\tscene,\n\t\t\t\t\t\t\t\t\tt_ray *\t\tray\n)\n{\n\t__constant\tt_object *\t\t\tobj;\n\t\t\t\tt_intersection\t\tbbox_ws_inter;\n\t\t\t\tt_intersection\t\tbbox_os_inter;\n\t\t\t\tt_intersection\t\tprim_inter;\n\t\t\t\tfloat\t\t\t\ttmax;\n\t\t\t\tfloat\t\t\t\tnew_tbbox_ws;\n\t\t\t\tfloat\t\t\t\tnew_tbbox_os;\n\t\t\t\tfloat\t\t\t\tnew_t;\n\t\t\t\tt_ray\t\t\t\tray_os;\n\t\t\t\tt_ray\t\t\t\tresult_ray_os;\n\n\ttmax = ray->t;\n\tprim_inter = INTER_NONE;\n\tfor (uint i = 0; i < scene->object_amount; ++i)\n\t{\n\t\tobj = &(scene->objects[i]);\n\t\tbbox_ws_inter = rt_cl_ray_intersect_bbox(*ray, obj->bbox_ws, 0.f, tmax, &new_tbbox_ws);\n\t\tif (bbox_ws_inter) \n\t\t{\n\t\t\tif (scene->render_mode == RENDERMODE_BBOX_WS)\n\t\t\t{\n\t\t\t\ttmax = new_tbbox_ws;\n\t\t\t\tray->t = new_tbbox_ws;\n\t\t\t\tray->hit_obj_id = i;\n\t\t\t\tprim_inter = bbox_ws_inter;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tray_os = *ray;\n\t\t\t\tray_os.inter_type = INTER_NONE;\n\t\t\t\tray_os.pos = rt_cl_apply_homogeneous_matrix(obj->w_to_o, ray_os.pos);\n\t\t\t\tray_os.dir = rt_cl_apply_linear_matrix(obj->w_to_o, ray_os.dir);//DO NOT NORMALIZE: YOU NEED TO KEEP ray.t CONSISTENT\n\n\t\t\t\tbbox_os_inter = rt_cl_ray_intersect_bbox(ray_os, obj->bbox_os, 0.f, tmax, &new_tbbox_os);\n\t\t\t\tif (bbox_os_inter)\n\t\t\t\t{\n\t\t\t\t\tif (scene->render_mode == RENDERMODE_BBOX_OS)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmax = new_tbbox_os;\n\t\t\t\t\t\tray->t = new_tbbox_os;\n\t\t\t\t\t\tray->hit_obj_id = i;\n\t\t\t\t\t\tprim_inter = bbox_os_inter;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tray_os.inter_type = rt_cl_primitive_get_inter(&new_t, ray_os, obj->type);\n\t\t\t\t\t\tif (ray_os.inter_type && EPS < new_t && new_t < ray->t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tray_os.hitpos = ray_os.pos + ((float3)new_t) * ray_os.dir;\n\t\t\t\t\t\t\tif (rt_cl_point_is_in_bbox(ray_os.hitpos, obj->bbox_os))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprim_inter = ray_os.inter_type;\n\t\t\t\t\t\t\t\tresult_ray_os = ray_os;\n\t\t\t\t\t\t\t\tresult_ray_os.hit_obj_id = i;\n\t\t\t\t\t\t\t\tray->t = new_t;\n\t\t\t\t\t\t\t\tresult_ray_os.t = new_t;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ((scene->render_mode != RENDERMODE_BBOX_WS) && \n\t\t(scene->render_mode != RENDERMODE_BBOX_OS) &&\n\t\tprim_inter)\n\t\t*ray = result_ray_os;\n\treturn (prim_inter);\n}\n\nstatic t_ray\t\t\trt_cl_accumulate_lum_and_bounce_ray\n(\n\n\t\t\t\t\t\t__constant\tt_scene\t*\tscene,\n\t\t\t\t\t\t__constant\tuint *\t\timg_texture,\n\t\t\t\t\t\t\t\t\tuint2 *\t\trandom_seeds,\n\t\t\t\t\t\t\t\t\tt_ray\t\tray\n)\n{\n\t__constant\tt_object *\tobj = &(scene->objects[ray.hit_obj_id]);\n\t\t\t\tt_ray\t\tnew_ray;\n\t\t\t\tfloat3\t\thitpos;\n\t\t\t\tfloat3\t\tnormal;\n\t\t\t\tt_texture\ttexture;\n\t\t\t\tbool\t\tis_inter_inside;\n\n\thitpos = ray.hitpos;\n\tnormal = ray.inter_type * rt_cl_primitive_get_normal(hitpos, obj->type);\n\tis_inter_inside = (ray.inter_type == INTER_INSIDE);\t\n\n//\ttexture = rt_cl_get_texture_properties(scene, obj, img_texture, random_seeds, hitpos, normal);\n\ttexture.rgb = obj->rgb_a;\n\n\tif (scene->render_mode == RENDERMODE_SOLIDTEXTURE)\n\t{\n\t\tray.lum_acc == obj->rgb_a;//texture.rgb * ray.lum_mask;\n\t\treturn (ray);\n\t}\n\tif (scene->render_mode == RENDERMODE_NORMALS)\n\t{\n\t\tray.lum_acc = fabs(hitpos);\n\t\treturn (ray);\n\t}\n//\tnormal = texture.bump_normal;\n//\tprintf(\"normal %f %f %f\\n\", normal.x, normal.y, normal.z);\n\n\tnew_ray.refrac = ray.refrac;\n\tnew_ray.hit_obj_id = -1;\n\tnew_ray.inter_type = INTER_NONE;\n\tnew_ray.t = scene->render_dist;\n\tnew_ray.complete = (obj->material == light);\n\tnew_ray.lum_acc = ray.lum_acc;\n\t\n\tif (new_ray.complete)\n\t{\n\t\tnew_ray.lum_acc += ray.lum_mask * texture.rgb; //TODO test with \"* dot(normal, -ray.dir)\" weighing ?\n\t\treturn (new_ray);\n\t}\n\n\telse if (obj->material == diffuse)\n\t{\n\t\tnew_ray.dir = rt_cl_rand_dir_coshemi(random_seeds, normal);\n\t\tnew_ray.lum_mask = ray.lum_mask * texture.rgb * (float3)(dot(normal, new_ray.dir));//cos sampling, defines contribution to ray.lum_acc\n\t}\n\telse if (obj->material == transparent)\n\t{\n\t\tnew_ray.lum_mask = ray.lum_mask;\n\t\tfloat\tprev_refrac = ray.refrac;\n\t\tfloat\tnew_refrac\t= (is_inter_inside) ?\n\t\t\t\t\t\t\t\tray.refrac / obj->refrac : //TODO replace with a stored obj->inv_refrac and init in build_scene ?\n\t\t\t\t\t\t\t\tray.refrac * obj->refrac;\n\t\tbool\tis_transmitted;\n\n\t\tis_transmitted = rt_cl_get_transmit_or_reflect(&new_ray.dir, random_seeds, ray.dir, normal, prev_refrac, new_refrac, obj->roughness);\n\t\tnew_ray.lum_mask = (!is_inter_inside && is_transmitted) ?\n\t\t\tray.lum_mask * texture.rgb :\n\t\t\tray.lum_mask;\n\n\t\t//new_ray.lum_mask = ray.lum_mask * texture.rgb; //TODO replace with this line and return texture.rgb = 1.1.1. for inter_outside and an average of samples for inter_inside\n\n\t\tray.refrac = is_transmitted ? new_refrac : prev_refrac;\n\t\t//Position correction for transmission\n\t\tif (is_transmitted)\n\t\t\thitpos = mad(-2.f * EPS, normal, hitpos);//TODO @Hugo beware with textures for this call\n\t}\n\telse if (obj->material == specular)\n\t{\n\t\tnew_ray.dir = rt_cl_get_reflect_coslobe(random_seeds, ray.dir, normal, obj->roughness);\n\t\tnew_ray.lum_mask = ray.lum_mask * texture.rgb * (float3)(dot(normal, new_ray.dir));//*dot(new_dir, reflect) ?\n\t}\n\thitpos = (float3)(EPS) * normal + hitpos;//TODO @Hugo maybe textures should take care of this call actually ?\n\tnew_ray.pos = rt_cl_apply_homogeneous_matrix(obj->o_to_w, hitpos);\n\tnew_ray.dir = rt_cl_apply_linear_matrix(obj->o_to_w, new_ray.dir);\n\n\treturn (new_ray);\n}\n\nstatic t_ray\t\t\trt_cl_create_camray\n(\n\t\t\t\t\t__constant\t\tt_scene\t*\tscene,\n\t\t\t\t\t\t\t\t\tuint2 *\t\trandom_seeds\n)\n{\n\tint const\t\t\tx_id = get_global_id(0);\n\tint const\t\t\ty_id = get_global_id(1);\n\tint const\t\t\twidth = scene->work_dims.x;\n\tint const\t\t\theight = scene->work_dims.y;\n\tfloat16\tconst\t\tcam_mat44 = scene->camera.c_to_w;\n\tfloat const\t\t\tfov_val = -width / (2.f * tan(scene->camera.hrz_fov));\n\tt_ray\t\t\t\tcamray;\n\tfloat2\t\t\t\tseeds;\n\tfloat2\t\t\t\tbox_muller_sample;\n\tfloat3\t\t\t\taperture;\n\n\tcamray.hitpos = (float3)(0.f);\n\tcamray.lum_acc = scene->camera.rgb_shade;\n\tcamray.lum_mask = scene->camera.rgb_mask;\n\tcamray.t = scene->render_dist;\n\tcamray.complete = false;\n\tcamray.hit_obj_id = -1;\n\tcamray.inter_type = INTER_NONE;\n\tif (scene->camera.model == CAMERA_MODEL_PINHOLE)\n\t{\n\t\tcamray.pos = (float3)(0.f, 0.f, 0.f);\n\t\tcamray.dir = (float3)(x_id - width / 2, y_id - height / 2, fov_val);\n\t}\n\telse if (scene->camera.model == CAMERA_MODEL_BLUR_SIMPLE)\n\t{\n\t\tcamray.pos = (float3)(rt_cl_frand_neg1half_to_pos1half(random_seeds),\n\t\t\t\t\t\t\trt_cl_frand_neg1half_to_pos1half(random_seeds),\n\t\t\t\t\t\t\t0.f);\n\t\tcamray.pos *= (float3)(scene->camera.aperture);\n\t\tcamray.dir = (float3)(x_id - width / 2, y_id - height / 2, fov_val);\n\t\tcamray.dir +=\t(float3)\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\trt_cl_frand_neg1half_to_pos1half(random_seeds) * scene->camera.focal_dist,\n\t\t\t\t\t\t\trt_cl_frand_neg1half_to_pos1half(random_seeds) * scene->camera.focal_dist,\n\t\t\t\t\t\t\t0.f\n\t\t\t\t\t\t);\n\t}\n\telse if (scene->camera.model == CAMERA_MODEL_BLUR_FOCAL)\n\t{\n\t\tseeds = (float2)(rt_cl_frand_0_to_1(random_seeds) / 2,\n\t\t\t\t\t\trt_cl_frand_0_to_1(random_seeds) / 2);\n\t\tbox_muller_sample = (float2)(sqrt(-2.f * log((float)(seeds.x))) * cos((float)(TAU * seeds.y)),\n\t\t\t\t\t\t\t\t\tsqrt(-2.f * log((float)(seeds.x))) * sin((float)(TAU * seeds.y)));\n\t\tcamray.dir = (float3)(x_id - width / 2 + box_muller_sample.x, y_id - height / 2 + box_muller_sample.y, fov_val);\n\t\tcamray.dir = normalize(camray.dir);\n\t\taperture.x = rt_cl_frand_0_to_1(random_seeds) * scene->camera.aperture;\n\t\taperture.y = rt_cl_frand_0_to_1(random_seeds) * scene->camera.aperture;\n\t\tcamray.pos = (float3)(aperture.x, aperture.y, 0.f);\n\t\tcamray.dir = (scene->camera.focal_dist * camray.dir) - camray.pos;\n\t}\n\telse if (scene->camera.model == CAMERA_MODEL_AUTO_FOCUS)\n\t{\n\t\tseeds = (float2)(rt_cl_frand_0_to_1(random_seeds) / 2,\n\t\t\t\t\t\trt_cl_frand_0_to_1(random_seeds) / 2);\n\t\tbox_muller_sample = (float2)(sqrt(-2.f * log((float)(seeds.x))) * cos((float)(TAU * seeds.y)),\n\t\t\t\t\t\t\t\t\tsqrt(-2.f * log((float)(seeds.x))) * sin((float)(TAU * seeds.y)));\n\t\tcamray.dir = (float3)(x_id - width / 2 + box_muller_sample.x, y_id - height / 2 + box_muller_sample.y, fov_val);\n\t\tcamray.dir = normalize(camray.dir);\n\t\taperture.x = rt_cl_frand_0_to_1(random_seeds) * scene->camera.aperture;\n\t\taperture.y = rt_cl_frand_0_to_1(random_seeds) * scene->camera.aperture;\n\t\tcamray.pos = (float3)(aperture.x, aperture.y, 0.f);\n\t\tcamray.dir = (scene->camera.zoom * camray.dir) - camray.pos;\t\n\t}\n\telse if (scene->camera.model == CAMERA_MODEL_ORTHOGRAPHIC)\n\t{\n\t\tcamray.pos = (float3)(x_id - width / 2, y_id - height / 2, 0.f);\n\t\tcamray.pos *= (float3)(scene->camera.aperture / scene->camera.zoom);\n\t\tcamray.dir = (float3)(0.f, 0.f, -1.f);\n\t}\n\tcamray.pos = rt_cl_apply_homogeneous_matrix(cam_mat44, camray.pos);\n\tcamray.dir = rt_cl_apply_linear_matrix(cam_mat44, camray.dir);\n\tcamray.dir = normalize(camray.dir);\n\n\tcamray.refrac = 1.f;//TODO make \"is in primitive\" functions\n\treturn (camray);\n}\n \nstatic float3\t\t\trt_cl_get_ray_pixel_contribution\n(\n\t\t\t\t\t__constant\t\tt_scene\t*\tscene,\n\t\t\t\t\t__constant\t\tuint *\t\timg_texture,\n\t\t\t\t\t\t\t\t\tuint2 *\t\trandom_seeds\n)\n{\n\tt_ray\t\t\t\tray_i;\n\tt_ray\t\t\t\ttmp;\n\tt_intersection\t\tinter;\n\n\tray_i = rt_cl_create_camray(scene, random_seeds);\n\tfor (uint depth = 0; !ray_i.complete && depth < scene->max_ray_depth; ++depth)\n\t{\n\t\tinter = rt_cl_trace_ray_to_scene(scene, &ray_i);\n\t\tif (inter)\n\t\t{\n\t\t\tif (scene->render_mode == RENDERMODE_MCPT)\n\t\t\t{\n\t\t\t\ttmp = rt_cl_accumulate_lum_and_bounce_ray(scene, img_texture, random_seeds, ray_i);\n\t\t\t\tray_i = tmp;\n\t\t\t}\n\t\t\telse if ((scene->render_mode == RENDERMODE_SOLIDTEXTURE) || (scene->render_mode == RENDERMODE_NORMALS))\n\t\t\t{\n\t\t\t\ttmp = rt_cl_accumulate_lum_and_bounce_ray(scene, img_texture, random_seeds, ray_i);\n\t\t\t\treturn (tmp.lum_acc);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (inter == INTER_INSIDE)\n\t\t\t\t\treturn (scene->objects[ray_i.hit_obj_id].rgb_b);\n\t\t\t\telse\n\t\t\t\t\treturn (scene->objects[ray_i.hit_obj_id].rgb_a);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (scene->render_mode == RENDERMODE_MCPT)\n\t\t\t{\n\t\t\t\tray_i.complete = true;\n\t\t\t\tray_i.lum_acc += ray_i.lum_mask * scene->bg_rgb;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn (scene->bg_rgb);\n\t\t\t}\n\t\t}\n\t}\n\treturn (ray_i.lum_acc);\n}\n\n\n__kernel void\t\t\trt_cl_render\n(\n\t\t\t\t\t__global\t\tfloat3 *\trays_pp_tensor,\n\t\t\t\t\t__constant\t\tt_scene\t*\tscene,\n\t\t\t\t\t__constant\t\tuint *\t\timg_texture\n)\n{\n\tsize_t const\t\t\tx_id = get_global_id(0); /* x-coordinate of the current pixel */\n\tsize_t const\t\t\ty_id = get_global_id(1); /* y-coordinate of the current pixel */\n\tsize_t const\t\t\tblock_x_id = x_id - get_global_offset(0); /* x-coordinate of the current pixel */\n\tsize_t const\t\t\tblock_y_id = y_id - get_global_offset(1); /* y-coordinate of the current pixel */\n\tsize_t const\t\t\tray_id = get_global_id(2); /* id of the current ray thread amongst the MC simulation for the current pixel*/\n\n\tif (x_id >= scene->work_dims.x || y_id >= scene->work_dims.y || ray_id >= scene->work_dims.z)\n\t{\n\t\treturn ;\n\t}\n\n\tsize_t const\t\t\tblock_width = get_global_size(0);\n\tsize_t const\t\t\tblock_height = get_global_size(1);\n\tsize_t const\t\t\twork_item_id = block_height * block_width * ray_id\n\t\t\t\t\t\t\t\t\t\t+\t\t\t\t\tblock_width * (block_y_id)\n\t\t\t\t\t\t\t\t\t\t+\t\t\t\t\t\t\t\t (block_x_id);\n\tuint2\t\t\t\trandom_seeds;\n\tfloat3\t\t\t\tray_lum_acc;\n\n/*\tif (x_id == 50 && y_id == 100 && ray_id == 0)\n\t{\n\t\tprintf(\"render blocx %zu blocy %zu\\n\", block_x_id, block_y_id);\n\t}\n*/\n\trandom_seeds.x = (x_id ^ scene->random_seed_time) + ray_id;\n\trandom_seeds.y = y_id ^ (27309 * scene->random_seed_time - 0x320420C57 + ray_id);\n\trt_cl_rand(&random_seeds);\n\n\tray_lum_acc = rt_cl_get_ray_pixel_contribution(scene, img_texture, &random_seeds);\n\trays_pp_tensor[work_item_id] = ray_lum_acc;\n}\n\n\n__kernel void\t\t\trt_cl_average\n(\n\t\t\t\t\t__global\t\tuint *\t\t\t\tresult_imgbuf,\n\t\t\t\t\t__global\t\tfloat3 *\t\t\trays_pp_tensor,\n\t\t\t\t\t__constant\t\tuint8 *\t\t\t\ttensor_dims_arg\n)\n{\n\tuint3 const\t\t\twork_steps = tensor_dims_arg->s012; /* work_step.xyz */\n\tuint3 const\t\t\twork_dims = tensor_dims_arg->s456; /* work_dims.xyz, or equivalently (float3)(canvas_w, canvas_h, mc_raysamp_size) */\n\tsize_t const\t\tx_id = get_global_id(0); /* x-coordinate of the current pixel */\n\tsize_t const\t\ty_id = get_global_id(1); /* y-coordinate of the current pixel */\n\n\tif (x_id >= work_dims.x || y_id >= work_dims.y)\n\t{\n\t\treturn ;\n\t}\n\n\tsize_t const\t\tblock_x_id = x_id - get_global_offset(0); /* x-coordinate of the current pixel in current tensor block */\n\tsize_t const\t\tblock_y_id = y_id - get_global_offset(1); /* y-coordinate of the current pixel in current tensor block */\n\tsize_t const\t\twork_item_id = work_dims.x * y_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ x_id;\n\tsize_t const\t\tinit = get_global_size(0) * block_y_id //work_steps.x * block_y_id\n\t\t\t\t\t\t\t\t\t\t\t+ block_x_id;\n\tsize_t const\t\tinc = work_steps.y * work_steps.x;\n\tsize_t const\t\ttensor_size = inc * work_dims.z; // we need the full ray dimension of the tensor for a quick average\n\tfloat const\t\t\tinv_samp_size = native_recip((float)work_dims.z);\n\tfloat3\t\t\t\tvcolor3 = (float3)(0.f);\n\tuint3\t\t\t\tcolor3;\n\tuint\t\t\t\tcolor;\n\n\n//\tint\t\t\t\t\tray_global_id;\n\n\t#pragma unroll\n\tfor (uint i = init; i < tensor_size; i += inc)\n\t{\n\t\tvcolor3 += rays_pp_tensor[i];\n\t}\n/*\n\t#pragma unroll\n\tfor (int i = 0; i < tensor_dims.z; ++i)\n\t{\n\t\tray_global_id = tensor_dims.y * tensor_dims.x * i\n\t\t\t\t\t+\t\t\t\t\ttensor_dims.x * y_id\n\t\t\t\t\t+\t\t\t\t\t\t\t\t\tx_id;\n\t\tvcolor3 += rays_pp_tensor[ray_global_id];\n\t}\n*/\n\tvcolor3 *= (float3)(inv_samp_size);\n\tvcolor3 = (float3)(255.f) * fmin(vcolor3, (float3)(1.f));\n\tcolor3 = (uint3)(floor(vcolor3.x), floor(vcolor3.y), floor(vcolor3.z));\n\tcolor = 0xFF000000 | (color3.x << 16) | (color3.y << 8) | (color3.z);\n\tresult_imgbuf[work_item_id] = color;\n}",
			"file": "src/ocl/rt_cl_render.cl",
			"file_size": 16328,
			"file_write_time": 131969891640000000,
			"settings":
			{
				"buffer_size": 16329,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "concat.cl",
			"settings":
			{
				"buffer_size": 88257,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/ex5.rt",
			"settings":
			{
				"buffer_size": 1479,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl"
	],
	"file_history":
	[
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl/rt_cl_hyperboloid.cl",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl/rt_cl_sphere.cl",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl/rt_cl_infcone.cl",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl/rt_cl_paraboloid.cl",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl/rt_cl_build_scene.cl",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl/rt_cl_patterns.cl",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl/rt_cl_linear_algebra.cl",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl/rt_cl_texture.cl",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl/rt_cl_perlin_noise.cl",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/opencl_render_mem.c",
		"/Users/tduquesn/Workspace/tmp_tests/RT_abort/src/ocl/rt_cl_cylinder.cl",
		"/Users/fulguritude/Workspace/42/09-rt/Makefile",
		"/Users/fulguritude/Workspace/42/09-rt/src/opencl_render.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/opencl_memory.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/opencl_init.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/opencl_utils.c",
		"/Users/fulguritude/Workspace/42/09-rt/concat.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/rt_cl.h",
		"/Users/fulguritude/Workspace/42/09-rt/src/init_sdl.c",
		"/Users/fulguritude/Workspace/42/09-rt/rtv1_tduquesn/Makefile",
		"/Users/fulguritude/Workspace/42/09-rt/src/rt_open.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/rt_save.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_scene.cl.h",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_sphere.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_cylinder.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_hyperboloid.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_primitives_2d.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_paraboloid.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_infcone.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_cone.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_cube.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/ui_mouse_objectlist.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/scene.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/rt_get_str.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/main.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/opencl_get_error_str.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/camera.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_texture.cl",
		"/Users/fulguritude/Workspace/42/09-rt/tests/ex5.rt",
		"/Users/fulguritude/Workspace/42/09-rt/src/rt_scene.h",
		"/Users/fulguritude/Workspace/42/09-rt/src/render.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_build_scene.cl",
		"/Users/fulguritude/Workspace/42/09-rt/tests/cube.rt",
		"/Users/fulguritude/Workspace/42/09-rt/src/event_window.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/ui.h",
		"/Users/fulguritude/Workspace/42/09-rt/src/ui_render.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_render.cl",
		"/Users/fulguritude/Workspace/42/09-rt/rt.h",
		"/Users/fulguritude/Workspace/42/09-rt/src/rt_open_read.c",
		"/Users/fulguritude/Workspace/42/09-rt/tests/ex2.rt",
		"/Users/fulguritude/Workspace/42/09-rt/src/ui_mouse.c",
		"/Users/fulguritude/Workspace/42/09-rt/tests/sphere.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/paraboloid.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/plane.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/specandglassy.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/showcase.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/saddle.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/rectangle.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/kirby.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/lego.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/ex3.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/ex4.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/infcone.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/ex1.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/cylinder.rt",
		"/Users/fulguritude/Workspace/42/09-rt/tests/disk.rt",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_random.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_materials.cl",
		"/Users/fulguritude/Workspace/42/09-rt/config.ini",
		"/Users/fulguritude/Workspace/42/09-rt/rtv1_tduquesn/src/ray_utils.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_infcylinder.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_linear_algebra.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/event_mouse.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/ocl/rt_cl_debug.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/init_scene.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/render_ui.c",
		"/Users/fulguritude/Workspace/42/09-rt/libft/src/convert/ft_str_to_f64.c",
		"/Users/fulguritude/Workspace/42/09-rt/libft/src/convert/ft_str_to_f32.c",
		"/Users/fulguritude/Workspace/42/09-rt/libft/src/convert/ft_f32_to_str.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/event.c",
		"/Users/fulguritude/Workspace/42/09-rt/src/rt_cl_build_scene.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/rt_cl_scene.cl.h",
		"/Users/fulguritude/Workspace/42/09-rt/tmp_srcs/stackovf_render_tmp.cl",
		"/Users/fulguritude/Workspace/42/09-rt/src/rt_cl_render.cl",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/tests/ex1.rt",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/src/rt_open.c",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/src/init_sdl.c",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/src/init_scene.c",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/src/init_opencl.c",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/src/rt_cl_random.cl",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/tmp_srcs/ft_atolf.c",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/src/config.h",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/src/config.c",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/src/debug.c",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/src/debug.h",
		"/home/fulguritude/Desktop/42/Workspace/08-rt/Makefile",
		"/Users/fulguritude/Workspace/42/09-rt/src/debug.h",
		"/Users/fulguritude/Workspace/42/09-rt/libft/libft_io.h",
		"/Users/fulguritude/Documents/lexou42/07-rtv1/rtv1.h",
		"/Users/fulguritude/Documents/lexou42/07-rtv1/src/render.c",
		"/Users/fulguritude/Documents/lexou42/07-rtv1/src/camera.c",
		"/Users/fulguritude/Documents/lexou42/07-rtv1/src/render_util.c",
		"/Users/fulguritude/Documents/lexou42/06-fractol/src/main.c",
		"/Users/fulguritude/Documents/lexou42/05-fdf/src/main.c",
		"/Users/fulguritude/Documents/lexou42/06-fractol/src/fractal.c",
		"/Users/fulguritude/Documents/lexou42/06-fractol/src/render.c",
		"/Users/fulguritude/Documents/lexou42/05-fdf/src/render.c",
		"/Users/fulguritude/Documents/lexou42/05-fdf/src/window.c",
		"/Users/fulguritude/Documents/lexou42/06-fractol/Makefile",
		"/Users/fulguritude/Documents/lexou42/05-fdf/Makefile",
		"/Users/fulguritude/Documents/lexou42/05-fdf/fdf.h",
		"/Users/fulguritude/Documents/42/workspace/07-fractol/Makefile"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			"<current file>",
			"/home/fulguritude/Desktop/42/Workspace/08-rt/src,<current file>",
			"/home/fulguritude/Desktop/42/Workspace/08-rt/src",
			"<current file>,/home/fulguritude/Desktop/42/Workspace/08-rt/src",
			"<current file>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"obj",
			"_interpolate",
			"get_erro",
			"\\:\\n",
			"case ",
			"],",
			"build_cl_program",
			"lights",
			"?\n",
			"__constant",
			"world_pos",
			"camera.world_pos",
			"object_amount",
			"0755"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"_cos_interpolate",
			")\\n\\t",
			"else if (error == ",
			"opencl_read_and_build_program",
			"__global",
			"0644"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/rt_scene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10235,
						"regions":
						{
						},
						"selection":
						[
							[
								5631,
								5631
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2189.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/ocl/rt_cl_scene.cl.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7788,
						"regions":
						{
						},
						"selection":
						[
							[
								3521,
								3521
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2721.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/rt_get_str_scene.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1421,
						"regions":
						{
						},
						"selection":
						[
							[
								1162,
								1162
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/ocl/rt_cl_primitives_2d.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3120,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 931.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/ocl/rt_cl_cone.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3415,
						"regions":
						{
						},
						"selection":
						[
							[
								1903,
								1903
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 706.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/ocl/rt_cl_materials.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4122,
						"regions":
						{
						},
						"selection":
						[
							[
								3569,
								3569
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1291.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/opencl_render_mem.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3541,
						"regions":
						{
						},
						"selection":
						[
							[
								1325,
								1325
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/ocl/rt_cl_random.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7821,
						"regions":
						{
						},
						"selection":
						[
							[
								3236,
								3236
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3421.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/ocl/rt_cl_render.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16329,
						"regions":
						{
						},
						"selection":
						[
							[
								5952,
								5952
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2355.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "concat.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 88257,
						"regions":
						{
						},
						"selection":
						[
							[
								891,
								891
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "tests/ex5.rt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1479,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "rt.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 237.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
